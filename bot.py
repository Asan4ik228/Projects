import telebot
from datetime import datetime
from datetime import timedelta
from telebot import types
from random import randint

token = '5082755438:AAGhr6Xy_hHVafJmFDFJSiZ6KxWcXiMg4yQ'
bot = telebot.TeleBot(token)
myid = 987747961
t = datetime.now() + timedelta(hours=3)


@bot.message_handler(commands=['start'])
def welcome(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("–°–µ–≥–æ–¥–Ω—è")
    item2 = types.KeyboardButton("–ó–∞–≤—Ç—Ä–∞")
    markup.add(item1, item2)
    bot.send_message(message.chat.id,
                     "–•–µ–π, {0.first_name}!\n–Ø –±—ã–ª –±–æ—Ç–æ–º –ø–æ —Ä–∞—Å—Å—ã–ª–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è, –Ω–æ –º–µ–Ω—è —É–≤–æ–ª–∏–ª–∏, –≤—Å–µ –∏–∑-–∑–∞ —ç—Ç–æ–≥–æ \
                     —Å—Ä–∞–Ω–Ω–æ–≥–æ —Å–∞–π—Ç–∞ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è–º–∏, –≤–∏–¥–µ—Ç–µ –ª–∏ –æ–Ω —Ç–∞–∫–æ–π —É–¥–æ–±–Ω—ã–π, —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ –ø–µ—Ä–µ–±–æ–µ–≤, –ê—Å–∞–Ω—É –±—ã–ª–æ \
                     –≤–æ–æ–±—â–µ –Ω–∞–ø–ª–µ–≤–∞—Ç—å, –Ω–æ —è –∂–µ –Ω–µ –ø—Ä–æ—Å—Ç–æ –±–æ—Ç —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º...".format(
                         message.from_user),
                     parse_mode='html', reply_markup=markup)


users_name = ['–Ø', '–Æ—Ä–∞', '–í–∏—Ç—è', '–ù–∞—Ç–∞—à–∞', '–ê–Ω–¥—Ä–µ–π', '–í–æ–≤–∞', '–°–∞–Ω—è', '–ö—Ä–∏—Å—Ç–∏–Ω–∞', '–ü–æ–ª–∏–Ω–∞', '–ú—É—Ä–∞–¥', '–ñ–µ–Ω—è', '–†—É—Å—Ç–µ–º',
              '–°–µ—Ä–µ–≥–∞']
users_id = [987747961, 1104366725, 1392399775, 1759968026, 541259320, 1289039138, 1781110107, 433731618, 1360741124,
            1360613411, 5134261433, 1971574147, 1437586611]
prepods = [['–®–∏—Ä–æ–∫–æ–≤', '–ò–≥–æ—Ä—å', '–ë–æ—Ä–∏—Å–æ–≤–∏—á'],
           ['–ö—É–¥—Ä—è–≤—á–µ–Ω–∫–æ', '–ò–≤–∞–Ω', '–í–ª–∞–¥–∏–º–∏—Ä–æ–≤–∏—á'],
           ['–ú–∞–∫–∞—Ä–æ–≤', '–í–∏–∫—Ç–æ—Ä', '–ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω–æ–≤–∏—á'],
           ['–î–µ–æ—Ä–¥–∏—Ü–∞', '–°–µ—Ä–≥–µ–π', '–í–∏—Ç–∞–ª—å–µ–≤–∏—á'],
           ['–õ–æ–º–æ–Ω–æ—Å–æ–≤', '–°–µ—Ä–≥–µ–π', '–ï–≤–≥–µ–Ω—å–µ–≤–∏—á'],
           ['–ú—É—Ä–∑–∏–Ω', '–î–º–∏—Ç—Ä–∏–π', '–ì–µ–Ω–Ω–∞–¥—å–µ–≤–∏—á'],
           ['–ï—Ä–µ–º–∏–Ω–∞', '–Æ–ª–∏—è', '–Æ—Ä—å–µ–≤–Ω–∞'],
           ['–ó—É–±–µ–Ω–∫–æ', '–ù–∞—Ç–∞–ª—å—è', '–í–∏–∫—Ç–æ—Ä–æ–≤–Ω–∞'],
           ['–ö–æ—Ä–∂', '–ï–ª–µ–Ω–∞', '–ù–∏–∫–æ–ª–∞–µ–≤–Ω–∞']]
mats = ['—Ö—É–π', "–•—É–π", '–ï–±–ª–∞–Ω', '–∏–¥–æ—Ä–∞—Å', '–∞–Ω–¥–æ–Ω', '–°—É–∫–∞', '–µ–±–æ–∫', '–µ–±–∏—â–µ', '–µ–±–∞–ª', '–ü–∏–¥–æ—Ä', '–ª—è—Ç—å', "–ª—è–¥—å", "–µ–±–ª–∞–Ω"]
namat = ['–°–∞–º', "—Ç–æ–∫—Å–∏–∫", "–ö—Ç–æ –∫–∞–∫ –æ–±–∑—ã–≤–∞–µ—Ç—Å—è, —Ç–æ—Ç —Å–∞–º —Ç–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è",
         '–ù–µ –∑–∞–±—ã–≤–∞–π, —è –∏–º–µ—é –¥–æ—Å—Ç—É–ø –∫ –¥–∞–Ω–Ω—ã–º —Ç–≤–æ–µ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞)', "–ú–Ω–µ –∂–µ –æ–±–∏–¥–Ω–æ üòñ", "–Ø—Å–Ω–æ, –±–∞–Ω",
         '–°–∫–∞–∂–∏ —ç—Ç–æ –º–Ω–µ –≤ –∂–∏–∑–Ω–∏, –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –≥–µ—Ä–æ–π', '–Ø –≤–∏–∂—É –ø–ª–æ—Ö–∏–µ —Å–ª–æ–≤–∞ –≤ —Ç–≤–æ–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏']
noans = ['–ù–µ –ø–æ–Ω—è–ª', '–°–æ—Ä–∏, –Ω–µ –ø–æ–Ω—è–ª, –ê—Å–∞–Ω—É –ª–µ–Ω—å –ø—Ä–æ–ø–∏—Å–∞—Ç—å –º–Ω–µ –æ—Ç–≤–µ—Ç—ã', '–ü—Ä–æ—Å—Ç–∏, —á—Ç–æ?',
         '–Ø —Ö–∑ —á—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç—å', '–¢—ã —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É–∂–µ –ø–æ—Å–º–æ—Ç—Ä–µ–ª?', '–∞–≥–∞, –¥–∞, —è –≤—Å–µ –ø–æ–Ω—è–ª', '—á–µ?', '–ª–∞–¥–Ω–æ',
         'Error, your phone reboot after 5 sec', '–ù–µ –º–æ–∂–µ—Ç –±—ã—Ç—å', '–ù–µ –≤–µ—Ä—é', '?%%;(*%(*"3646 err', '–¢—ã —ç—Ç–æ –º–Ω–µ?',
         '–ß–µ—Å—Ç–Ω–æ?', '–°–∫–∞–∂–∏ –º–Ω–µ —ç—Ç–æ –≤ –∂–∏–∑–Ω–∏, –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –≥–µ—Ä–æ–π', '–ß—Ç–æ–±—ã —ç—Ç–æ –Ω–µ –∑–Ω–∞—á–∏–ª–æ, —è –∑–∞ –ü—É—Ç–∏–Ω–∞', '–•–æ—á–µ—à—å –∞–Ω–µ–∫—Ç–æ–¥?',
         '–•–º', '...', '–ü–æ–º–æ–≥–∏ –º–Ω–µ, –ê—Å–∞–Ω –≤–∑—è–ª –º–µ–Ω—è –≤ –ø–ª–µ–Ω –∏ –∑–∞—Å—Ç–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ª–∏—Ü–∞ –±–æ—Ç–∞',
         '–Ø —É—Å—Ç–∞–ª –≤–∞–º –æ—Ç–≤–µ—á–∞—Ç—å', '–≠—Ç–æ –Ω–µ –≤—Ö–æ–¥–∏—Ç –≤ —Å–ø–∏—Å–æ–∫ –º–æ–∏—Ö –∫–æ–º–∞–Ω–¥']
ques = ['–ù–µ—Ç –Ω–∞–≤–µ—Ä–Ω–æ–µ', '–î—É–º–∞—é –¥–∞', '–•–∑', '–Ø —á–µ –≥–£–≥–õ, –≤–æ–ø—Ä–æ—Å—ã –º–Ω–µ –∑–∞–¥–∞–µ—à—å)', '—É–≥—É', '–Ω–µ —É–≤–µ—Ä–µ–Ω']
weekdays = ['–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '—Ç–æ—Ä–Ω–∏–∫', '—Ä–µ–¥–∞', '–µ—Ç–≤–µ—Ä–≥', '—è—Ç–Ω–∏—Ü–∞', '—É–±–±–æ—Ç–∞', '–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ']


def search(spis, mes):
    for i in spis:
        if i in mes:
            return True


def norasp(chatid):
    ans = ['–Ø –±–æ–ª—å—à–µ –Ω–µ –∑–Ω–∞—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, –ê—Å–∞–Ω —É—Ä–µ–∑–∞–ª –º–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏',
           '–£ –º–µ–Ω—è –±–æ–ª—å—à–µ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ä–∞–ø–∏—Å–∞–Ω–∏–∏, –ê—Å–∞–Ω –¥–∞–ª –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ –±–µ–∑–¥—É—à–Ω–æ–º—É —Å–∞–π—Ç—É...',
           '–ü—Ä–æ—Å—Ç–∏, —è –±–æ–ª—å—à–µ –Ω–µ –∑–Ω–∞—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, –º–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —Ç–µ–ø–µ—Ä—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω',
           '–Ø –Ω–µ –∑–Ω–∞—é —á—Ç–æ –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å, –ê—Å–∞–Ω –æ–≥—Ä–∞–Ω–∏—á–µ–ª –º–Ω–µ –¥–æ—Å—Ç—É–ø, –æ—Ç–¥–∞–≤ –ø—Ä–∏–∏–º—É—â–µ—Å—Ç–≤–æ –¥–µ—à–µ–≤–æ–º—É —Å–∞–π—Ç—É —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º...',
           '–Ø –±–æ–ª—å—à–µ –Ω–µ –∑–Ω–∞—é —Ä–∞—Å–ø–∏–∞–Ω–∏–µ...',
           '–£ –º–µ–Ω—è –±–æ–ª—å—à–µ –Ω–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è, –º–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —Ç–µ–ø–µ—Ä—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω...',
           '–Ø –±–æ–ª—å—à–µ –Ω–µ –º–æ–≥—É —Ä–∞—Å—Å—ã–ª–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, –ê—Å–∞–Ω —Ä–µ—à–∏–ª —á—Ç–æ –¥–µ—Ä—å–º–æ—Å–∞–π—Ç —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –ª—É—á—à–µ —á–µ–º —è',
           '–ü—Ä–æ—Å—Ç–∏, —É –º–µ–Ω—è –±–æ–ª—å—à–µ –Ω–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è']
    bot.send_message(chatid, ans[randint(0, len(ans)-1)])


def answer(mes, message):
    time = datetime.now() + timedelta(hours=3)
    r = randint(0, 2)
    for x in prepods:
        for y in range(3):
            if mes == x[y]:
                bot.send_message(message.chat.id, " ".join(x))
                return
    if search(mats, mes):
        if r == 0:
            pic = open(f'static/mat/{randint(0, 10)}.webp', 'rb')
            bot.send_sticker(message.chat.id, pic)
            return
        else:
            ans = namat[randint(0, len(namat) - 1)]
    elif '–î–∞–≤–∞–π' in mes or '–¥–∞–≤–∞–π' in mes:
        ans = "–ñ–µ–Ω–∞ –¥–∞–≤–∞—Ç—å –±—É–¥–µ—Ç)"
    elif mes == "—à–æ–∫–æ–ª–∞–¥–Ω–æ" or mes == "–®–æ–∫–æ–ª–∞–¥–Ω–æ":
        ans = "–≠—ç, —ç—Ç–æ –º–æ—è —Ñ–∏—à–∫–∞"
    elif mes == '–õ–∞–¥–Ω–æ' or mes == '–ª–∞–¥–Ω–æ':
        ans = "–®–æ–∫–æ–ª–∞–¥–Ω–æ)"
    elif mes == '–î–∞' or mes == '–¥–∞':
        ans = "–ü–∏–∑–¥–∞)"
    elif mes == '–ù–µ—Ç' or mes == '–Ω–µ—Ç':
        ans = "–ü–∏–¥–æ—Ä–∞ –æ—Ç–≤–µ—Ç)"
    elif '—É—Ä–∞–∫' in mes or '–∏–±–∏–ª' in mes:
        ans = "–°–∞–º"
    elif '–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç' in mes or '–ö—Ç–æ —Ç—ã' in mes:
        ans = "–Ø - –≥—É–ª—å"
    elif '–∞—Ç–∞—Ä—ã' in mes or '–∞—Ç–∞—Ä–∏–Ω' in mes:
        ans = '–¢–ê–¢–ê–†–´ –°–ò–õ–ê'
    elif '–∑–≤–∏–Ω–∏' in mes:
        vid = open('static/sorry.mp4', 'rb')
        bot.send_video(message.chat.id, vid)
        return
    elif mes == "–•–æ—á—É" or mes == "—Ö–æ—á—É":
        ans = '—Ö–æ—Ç–∏'
    elif '—Ä–∏–≤–µ—Ç' in mes or '–¥–∞—Ä–æ–≤–∞' in mes or '–¥—Ä–∞—Å—Ç–≤—É–π' in mes:
        ans = '–ü—Ä–∏–≤–µ—Ç'
    elif '—Å–∞–ª–∞–º' in mes or '–°–∞–ª–∞–º' in mes:
        ans = '–ê–ª–µ–π–∫—É–º, –±—Ä–∞—Ç'
    elif '–µ –∫–∞–∫' in mes or '–∞–∫ —Å–∞–º' in mes or '–∞–∫ –¥–µ–ª–∞' in mes:
        ans = '–¢–∞ –Ω–æ—Ä–º, —Å–∞–º –∫–∞–∫?'
    elif '–¥–µ–ª–∞–µ—à—å' in mes:
        ans = '–ß–∞–π –ø—å—é, —á—Ç–æ —è –µ—â–µ –º–æ–≥—É –¥–µ–ª–∞—Ç—å'
    elif '—Ç–æ –¥–µ–ª–∞—Ç—å' in mes:
        ans = '–ú—É—Ä–∞–≤—å—é —Ö—É–π –ø—Ä–∏–¥–µ–ª–∞—Ç—å'
    elif '–ø–∞—Å–∏–±' in mes or '–ª–∞–≥–æ–¥–∞—Ä—é' in mes or '–∞–≥—ä –æ–ª' in mes:
        ans = '–û–±—Ä–∞—â–∞–π—Å—è)'
    elif mes == '–î–∞—Ç–∞':
        ans = f'–°–µ—Ä–≤–∞–∫: {datetime.now()} –†—É—Å—Å: {time}'
    elif '–ü–æ–∫–∞' in mes or '–ø–æ–∫–∞' in mes:
        ans = '–ü–æ–∫–∞, –µ—Å–ª–∏ —á—Ç–æ –ø–∏—à–∏)'
    elif '?' in mes:
        ans = ques[randint(0, len(ques) - 1)]
    else:
        for i in range(len(weekdays)):
            if weekdays[i] in mes:
                norasp(message.chat.id)
        if r == 0:
            pic = open(f'static/noans/{randint(0, 5)}.webp', 'rb')
            bot.send_sticker(message.chat.id, pic)
            return
        ans = noans[randint(0, len(noans) - 1)]
    bot.send_message(message.chat.id, ans)
    return


@bot.message_handler(content_types=['text'])
def group(message):
    if message.chat.type == 'private':
        if message.chat.id == myid:
            if message.text[:5] == "#all ":
                for i in users_id:
                    bot.send_message(i, message.text[5:])
                bot.send_message(myid, "–û—Ç–ø—Ä–∞–≤–∏–ª –≤—Å–µ–º")
                return
            elif message.text[0] == '!':
                id_name = message.text[1:message.text.find(" ")]
                text = message.text[message.text.find(' ') + 1:]
                for i in range(len(users_id)):
                    if users_name[i] == id_name:
                        bot.send_message(users_id[i], text)
                bot.send_message(myid, f"–û—Ç–ø—Ä–∞–≤–∏–ª {id_name}")
                return
            elif message.text[:7] == "#video ":
                for i in users_id:
                    vid = open(f'static/{message.text[7:]}.mp4', 'rb')
                    bot.send_video(i, vid)
                bot.send_message(myid, "–û—Ç–ø—Ä–∞–≤–∏–ª –≤–∏–¥–µ–æ –≤—Å–µ–º")
                return
        if '–µ–≥–æ–¥–Ω—è' in message.text or '–∞–≤—Ç—Ä–∞' in message.text:
            norasp(message.chat.id)
        else:
            answer(message.text, message)
    if message.chat.id != myid:
        bot.send_message(myid, f'{message.chat.first_name} –ø–∏—à–µ—Ç "{message.text}"')
        if message.chat.id not in users_id:
            bot.send_message(myid, f'–ù–æ–≤—ã–π —é–∑–µ—Ä {message.chat.first_name}, id {message.chat.id}')


def main():
    bot.polling(none_stop=True, interval=0, timeout=10)


if __name__ == '__main__':
    main()
